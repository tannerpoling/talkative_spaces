2022 3 30
- just realized i never used the iterator functionality of synth iterator in synthofself; everything was just continuously modified in "real time";
  never appended a bunch of values and cycled through them
  - way different here since I'm actually doing volume animations
- structure is written!
  - calling append on our synth iterator *should* change the base / default value of the iterator
- nothing is tested yet though


2022 3 28
- volume animation state change algorithm (definitely wrote this down before somewhere else)
  - init: no movement, going into start of quieting animation
    - delta_dist = 0, state = 0 -> stay in current state, volume multiplier = 1
    - delta_dist != 0, state = 0 -> movement, quiet down and change state to 1. volume multiplier decrease sharply and hold low
    - delta_dist = 0, state = 1 -> standing still, start getting louder and change state to 2. volume multiplier increase slowly and hold at 1
    - delta_dist != 0, state = 1 -> movement, continue holding volume multiplier low
    - delta_dist = 0, state = 2 -> standing still, keep gettng louder
      - once volume = 1 again, go back to state 0
    - delta_dist != 0, state = 2 -> movement again, go back to state 1. volume multiplier decrease sharply based on current volume and hold low
    - need some sort of timer and threshold values for delta_dist, count how many times person is over the threshold

2022 3 23
- working on volume animation
  - BASIC GOAL: have a volume animation play out at a determined point in time
                (just use a timer, no need to get into distance sensor stuff)
  - every loop cycle, talkative should ask audioControl what volume it should be using
    - talkative: 
      - give audioControl the current state data, and get back volume
    - audioControl:
      - give base audio level based on distance
      - apply *multiplier* based on any volume animations going on
        - 'detection' volume animation:
          - person went from being still to moving
            - NOTE: will likely need some sort of smoothing / thresholds here
          - this will actually be TWO animations: quieting down at first movement,
            and slowly getting louder at end of movement
            - quiet down, when movement first detected:
              1.0  0.5  0.3  0.1  0.1  0.1  0.1...   
            - go back to normal, once movement stops
            0.1  0.2  0.3  0.4... 1.0
            - IDEA: just scale volume with movement? gets rid of the need for any animations...
              - would work but effect would be way less cool...
          - may be best to use my iterator from synth of self; a queue with a default value that doesn't go away
          - going to have audioControl be a 'thing' -> class we can interact with
          
- untested: poll rate from every 0.5s to every 0.1s
- NOTE: see if audiolazy will work on rpi... could be cool to have one radio by synth chords
- NOTE: one idea- have volume animations stored separately, loaded into audioControl?
- NOTE: not going to worry about multiple audio streams

2022 3 21
- basics working pretty clean
- next focus: animating volume response to movement, time based control in general
  - no movement -> max volume
    - max volume based on distance
  - movement -> quiet for a bit UNTIL movement stops, then slowly ramps up
    - need to define thresholds
  - assuming all of this happens in the same loop -> time based ramping depends on period between loops
    - TODO: determine good loop period / rate. how often can we check the distance sensor, send data to touchdesigner?
    - idea of trying to make it all scale with the period but that sounds like more effort than it's worth
      - ex: period of 0.1s, and we use an array of volumes to "animate" volume
        - a 3 second animation at 0.1s per cycle = 30 values to loop through
    - then get into thresholds, tracking, time data, etc